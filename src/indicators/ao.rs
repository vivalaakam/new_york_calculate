use crate::indicators::result::IndicatorsResult;

/**
```
use new_york_calculate_core::indicators::ao;

let high_data = vec![32.1100,27.6200,28.2600,28.0200,26.9300,26.6500,27.2500,27.5800,27.9000,28.9000,29.3400,29.8200,29.5400,29.3000,29.5000,29.5000,29.7000,29.1400,27.1700,30.3400,30.2600,30.1400,29.9800,30.5500,32.1100,34.1600,39.5000,50.7800,51.3800,51.3400,50.7000,44.2300,42.7100,39.8200,42.3500,44.7100,44.2700,43.6700,44.8300,44.5500,46.8000,46.2400,45.5200,44.5500,46.1200,44.7100,44.4700,45.2800,44.6300,43.4300,46.2400,49.1300,49.9300,49.9300,51.3800,52.7800,50.5300,50.6100,49.3300,49.4100,53.3000,52.5800,62.3000,61.5700,62.5400,64.5400,74.1400,73.1700,70.1200,68.6400,71.7700,70.6400,71.7700,104.0400,103.4000,97.6200,98.9000,99.4600,89.2300,87.3400,82.2800,78.9900,81.5600,78.0300,73.8600,77.6700,79.4700,77.7100,76.7500,78.3100,77.7100,72.2500,68.0800,66.3100,65.7500,64.1400,67.4300,80.2800,78.3500];
let low_data = vec![25.6900,25.5700,25.7300,25.6900,25.6900,26.1700,26.0500,26.2900,26.8900,27.7400,28.4600,29.0200,28.4600,28.7800,29.0600,28.7400,28.5000,27.0100,26.3300,26.9700,29.1800,29.6200,29.5400,29.7400,30.4700,31.8300,34.6400,40.4200,47.6800,48.9700,43.2700,41.5800,38.7300,37.3300,37.8900,43.3900,42.6700,41.1400,42.3900,43.0300,43.7500,44.8300,43.3500,42.6700,43.6700,42.6700,43.5900,43.1900,43.3100,41.5800,42.5500,45.9600,47.4000,48.1700,48.9700,50.2500,48.6100,48.3700,48.0500,48.0500,49.1700,50.9800,49.8500,56.5600,57.8000,58.8400,64.5400,66.3100,63.1000,65.0600,66.9500,65.8300,67.3900,72.2500,84.1300,89.9100,93.1200,89.9100,83.1700,76.3400,72.7300,71.9300,75.8600,72.5700,67.9100,70.0400,75.1400,74.6600,72.6900,72.8900,70.6400,63.6600,57.8000,58.9200,52.6600,57.8800,62.3400,68.7600,67.6700];

let result = ao(high_data, low_data);
assert_eq!(result.is_ok(), true);
let data = result.unwrap();
assert_eq!(data.0.len(), 66);
assert_eq!(format!("{:?}", data.0), "[11.690500000000014, 9.353500000000025, 8.253117647058836, 7.881558823529424, 7.761205882352954, 8.259382352941195, 8.482205882352964, 8.179411764705904, 8.045352941176496, 7.950176470588268, 7.500470588235316, 7.251029411764726, 6.514323529411797, 5.7712647058823805, 5.2843529411765005, 4.924294117647094, 4.052617647058852, 3.743764705882384, 3.8741176470588528, 4.11555882352944, 4.5317058823529734, 5.464088235294142, 6.251764705882387, 6.074117647058856, 5.670147058823559, 5.0863823529412, 4.3345882352941345, 3.861970588235316, 4.122205882352958, 5.246705882352948, 7.059647058823543, 8.959852941176472, 10.49835294117647, 13.16858823529413, 14.98497058823532, 15.714852941176495, 16.380264705882375, 17.15279411764709, 16.172088235294147, 15.376264705882377, 18.37870588235296, 22.335529411764725, 25.798000000000016, 29.836088235294127, 33.354882352941196, 31.751029411764733, 28.243970588235328, 24.00741176470592, 18.979029411764742, 14.762264705882401, 11.617705882352993, 8.647588235294165, 7.143764705882418, 6.670411764705946, 5.367323529411848, 4.5294117647059835, 4.764029411764795, 4.104352941176558, 1.691264705882432, -1.3768529411763808, -4.206235294117548, -7.719647058823426, -10.624117647058725, -11.497235294117566, -9.635794117646967, -7.9344411764705]");

```
*/
pub fn ao(high: Vec<f64>, low: Vec<f64>) -> IndicatorsResult<(Vec<f64>,)> {
    if high.len() < 33 {
        return Ok((vec![],));
    }

    let period = 34;

    let mut output = vec![];

    let mut sum34 = 0.0;
    let mut sum5 = 0.0;
    let per34 = 1.0 / 34.0;
    let per5 = 1.0 / 5.0;

    for i in 0..period {
        let hl = 0.5 * (high[i] + low[i]);
        sum34 += hl;
        if i >= 29 {
            sum5 += hl;
        }
    }

    output.push(per5 * sum5 - per34 * sum34);

    for i in period..high.len() {
        let hl = 0.5 * (high[i] + low[i]);
        sum34 += hl;
        sum5 += hl;

        sum34 -= 0.5 * (high[i - 34] + low[i - 34]);
        sum5 -= 0.5 * (high[i - 5] + low[i - 5]);

        output.push(per5 * sum5 - per34 * sum34);
    }

    Ok((output,))
}
